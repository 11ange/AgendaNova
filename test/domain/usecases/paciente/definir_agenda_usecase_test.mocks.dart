// Mocks generated by Mockito 5.4.6 from annotations
// in agenda_treinamento/test/domain/usecases/paciente/definir_agenda_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:agenda_treinamento/domain/entities/agenda_disponibilidade.dart'
    as _i4;
import 'package:agenda_treinamento/domain/entities/sessao.dart' as _i6;
import 'package:agenda_treinamento/domain/repositories/agenda_disponibilidade_repository.dart'
    as _i2;
import 'package:agenda_treinamento/domain/repositories/sessao_repository.dart'
    as _i5;
import 'package:cloud_firestore/cloud_firestore.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AgendaDisponibilidadeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAgendaDisponibilidadeRepository extends _i1.Mock
    implements _i2.AgendaDisponibilidadeRepository {
  MockAgendaDisponibilidadeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.AgendaDisponibilidade?> getAgendaDisponibilidade() =>
      (super.noSuchMethod(
            Invocation.method(#getAgendaDisponibilidade, []),
            returnValue: _i3.Stream<_i4.AgendaDisponibilidade?>.empty(),
          )
          as _i3.Stream<_i4.AgendaDisponibilidade?>);

  @override
  _i3.Future<void> setAgendaDisponibilidade(
    _i4.AgendaDisponibilidade? agenda,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setAgendaDisponibilidade, [agenda]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SessaoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessaoRepository extends _i1.Mock implements _i5.SessaoRepository {
  MockSessaoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i6.Sessao>> getSessoes() =>
      (super.noSuchMethod(
            Invocation.method(#getSessoes, []),
            returnValue: _i3.Stream<List<_i6.Sessao>>.empty(),
          )
          as _i3.Stream<List<_i6.Sessao>>);

  @override
  _i3.Stream<List<_i6.Sessao>> getSessoesByTreinamentoId(
    String? treinamentoId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSessoesByTreinamentoId, [treinamentoId]),
            returnValue: _i3.Stream<List<_i6.Sessao>>.empty(),
          )
          as _i3.Stream<List<_i6.Sessao>>);

  @override
  _i3.Future<List<_i6.Sessao>> getSessoesByTreinamentoIdOnce(
    String? treinamentoId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSessoesByTreinamentoIdOnce, [treinamentoId]),
            returnValue: _i3.Future<List<_i6.Sessao>>.value(<_i6.Sessao>[]),
          )
          as _i3.Future<List<_i6.Sessao>>);

  @override
  _i3.Stream<List<_i6.Sessao>> getSessoesByDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getSessoesByDate, [date]),
            returnValue: _i3.Stream<List<_i6.Sessao>>.empty(),
          )
          as _i3.Stream<List<_i6.Sessao>>);

  @override
  _i3.Stream<List<_i6.Sessao>> getSessoesByMonth(DateTime? monthDate) =>
      (super.noSuchMethod(
            Invocation.method(#getSessoesByMonth, [monthDate]),
            returnValue: _i3.Stream<List<_i6.Sessao>>.empty(),
          )
          as _i3.Stream<List<_i6.Sessao>>);

  @override
  _i3.Future<void> setDayBlockedStatus(DateTime? date, bool? isBlocked) =>
      (super.noSuchMethod(
            Invocation.method(#setDayBlockedStatus, [date, isBlocked]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> addSessao(_i6.Sessao? sessao) =>
      (super.noSuchMethod(
            Invocation.method(#addSessao, [sessao]),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#addSessao, [sessao]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> addMultipleSessoes(List<_i6.Sessao>? sessoes) =>
      (super.noSuchMethod(
            Invocation.method(#addMultipleSessoes, [sessoes]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateSessao(_i6.Sessao? sessao) =>
      (super.noSuchMethod(
            Invocation.method(#updateSessao, [sessao]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteSessao(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSessao, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMultipleSessoes(List<String>? sessaoIds) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMultipleSessoes, [sessaoIds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void addSessaoInBatch(_i8.WriteBatch? batch, _i6.Sessao? sessao) =>
      super.noSuchMethod(
        Invocation.method(#addSessaoInBatch, [batch, sessao]),
        returnValueForMissingStub: null,
      );

  @override
  void updateSessaoInBatch(_i8.WriteBatch? batch, _i6.Sessao? sessao) =>
      super.noSuchMethod(
        Invocation.method(#updateSessaoInBatch, [batch, sessao]),
        returnValueForMissingStub: null,
      );

  @override
  void deleteSessaoInBatch(_i8.WriteBatch? batch, String? sessaoId) =>
      super.noSuchMethod(
        Invocation.method(#deleteSessaoInBatch, [batch, sessaoId]),
        returnValueForMissingStub: null,
      );
}
